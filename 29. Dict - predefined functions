			=============================================================
					Pre-Defined Functions in dict
			=============================================================
=>Dict Object contains Various Pre-Defined Functions for Performing Various Operations. They are
----------------------------------------------------------------------------------------------------------------------------------------------------------------
1) clear()
----------------------------------------------------------------------------------------------------------------------------------------------------------------
=>Syntax:      dictobj.clear()
=>This Function is used for Removing the all (Key,value) from dict object
=>When we call this function on empty dict object then we get None or Space as Result.
--------------------------
Examples
--------------------------
>>> d1={10:1.2,20:2.3,30:3.4,40:1.2}
>>> print(d1,type(d1),id(d1),len(d1))------------{10: 1.2, 20: 2.3, 30: 3.4, 40: 1.2} <class 'dict'> 1556378777664      4
>>> d1.clear()
>>> print(d1,type(d1),id(d1),len(d1))------------{} <class 'dict'> 1556378777664             0
>>> print({}.clear())--------------------None
>>> print(dict().clear())---------------None
----------------------------------------------------------------------------------------------------------------------------------------------------------------
2) pop(Key)
----------------------------------------------------------------------------------------------------------------------------------------------------------------
Syntax:    dictobj.pop(key)
=>This Function is used for Removing a (Key,value) from dict object by passing Value of Key.
-----------------------
Examples
-----------------------
>>> d1={10:1.2,20:2.3,30:3.4,40:1.2}
>>> print(d1,type(d1),id(d1))
{10: 1.2, 20: 2.3, 30: 3.4, 40: 1.2} <class 'dict'> 1556378866432
>>> d1.pop(20)
2.3
>>> print(d1,type(d1),id(d1))
{10: 1.2, 30: 3.4, 40: 1.2} <class 'dict'> 1556378866432
>>> d1.pop(30)
3.4
>>> print(d1,type(d1),id(d1))
{10: 1.2, 40: 1.2} <class 'dict'> 1556378866432
>>> d1.pop(40)
1.2
>>> print(d1,type(d1),id(d1))
{10: 1.2} <class 'dict'> 1556378866432
>>> d1.pop(50)-----------KeyError: 50
------------------------------------
>>> {}.pop(10)-------------KeyError: 10
>>> dict().pop(100)------KeyError: 100
----------------------------------------------------------------------------------------------------------------------------------------------------------------
3) popitem()
----------------------------------------------------------------------------------------------------------------------------------------------------------------
Syntax:    dictobj.popitem()
=>This Function is used for Removing  Last  (Key,value) from dict object .
--------------------------
Examples
--------------------------
>>> d1={10:1.2,20:2.3,30:3.4,40:1.2}
>>> print(d1,type(d1),id(d1))
{10: 1.2, 20: 2.3, 30: 3.4, 40: 1.2} <class 'dict'> 1556378866752
>>> d1.popitem()
(40, 1.2)
>>> print(d1,type(d1),id(d1))
{10: 1.2, 20: 2.3, 30: 3.4} <class 'dict'> 1556378866752
>>> d1.popitem()
(30, 3.4)
>>> print(d1,type(d1),id(d1))
{10: 1.2, 20: 2.3} <class 'dict'> 1556378866752
>>> d1.popitem()
(20, 2.3)
>>> print(d1,type(d1),id(d1))
{10: 1.2} <class 'dict'> 1556378866752
>>> d1.popitem()
(10, 1.2)
>>> print(d1,type(d1),id(d1))-----------{} <class 'dict'> 1556378866752
>>> d1.popitem()------------------------KeyError: 'popitem(): dictionary is empty'
>>> dict().popitem()--------------------KeyError: 'popitem(): dictionary is empty'
---------------------------------------------------------------------------------------------------------------------------------------------------------------------
4) copy()
---------------------------------------------------------------------------------------------------------------------------------------------------------------------
Syntax:		 dictobj2=dictobj1.copy()
=>This Function is used for Copying the content of dictobj1 into dictobj2(Implements Shallow Copy).
---------------------------
Examples
---------------------------
>>> d1={10:1.2,20:2.3}
>>> print(d1,type(d1),id(d1))
{10: 1.2, 20: 2.3} <class 'dict'> 1556378866496
>>> d2=d1.copy() # Shallow Copy
>>> print(d2,type(d2),id(d2))
{10: 1.2, 20: 2.3} <class 'dict'> 1556378866752
>>> d1[30]=3.4
>>> d2[10]=12.34
>>> print(d1,type(d1),id(d1))
{10: 1.2, 20: 2.3, 30: 3.4} <class 'dict'> 1556378866496
>>> print(d2,type(d2),id(d2))
{10: 12.34, 20: 2.3} <class 'dict'> 1556378866752
---------------------------------------------------------------------------------------------------------------------------------------------------------------------
5) get()--Most IMP
---------------------------------------------------------------------------------------------------------------------------------------------------------------------
=>Syntax:    varname=dictobj.get(key)
=>This Function  is used for Obtaining Value of Value by Passing Value of Key.
=>If the Value of Key does  not exist then It returns None
				OR
Syntax:      dictobj[Key]
	In This Syntax, If the Value of Key does not exist then we get KeyError
----------------------------------
Examples:
----------------------------------
>>> d1={10:1.2,20:2.3,30:3.4,40:1.2}
>>> print(d1)------------------------{10: 1.2, 20: 2.3, 30: 3.4, 40: 1.2}
>>> bal=d1.get(10)
>>> print(bal)----------------------1.2
>>> bal=d1.get(30)
>>> print(bal)----------------------3.4
>>> bal=d1.get(60)
>>> print(bal)---------------------None
>>> print({}.get(10))------------None
>>> print(dict().get(10))-------None
>>> print({20:1.2,30:3.4,40:5.6}.get(10))----None
		OR
>>> d1={10:1.2,20:2.3,30:3.4,40:1.2}
>>> print(d1)
{10: 1.2, 20: 2.3, 30: 3.4, 40: 1.2}
>>> d1[10]
1.2
>>> d1[20]
2.3
>>> d1[200]----------------KeyError: 200
>>> d1[2]-------------------KeyError: 2
------------------------------------------------------------------------------------------------------------------------------------------------------------
6) keys()
------------------------------------------------------------------------------------------------------------------------------------------------------------
Syntax:     varname=dictobj.keys()
=>This Function is used for Obtaining Values of Key and Palced in them IN LHS Varname and whose type is <class,dict_keys>
----------------------
Examples
----------------------
>>> d1={10:1.2,20:2.3,30:3.4,40:1.2}
>>> print(d1)
{10: 1.2, 20: 2.3, 30: 3.4, 40: 1.2}
>>> ks=d1.keys()
>>> print(ks,type(ks))
dict_keys([10, 20, 30, 40]) <class 'dict_keys'>
-------------------------
>>> for k in ks:
...		print(k)
...
		10
		20
		30
		40
>>> for k in d1.keys():
...		print(k)
...
		10
		20
		30
		40
------------------------------
>>> ks={}.keys()
>>> print(ks,type(ks))----------dict_keys([]) <class 'dict_keys'>
>>> ks=dict().keys()
>>> print(ks,type(ks))----------dict_keys([]) <class 'dict_keys'>
------------------------------------------------------------------------------------------------------------------------------------------------------------
7) values()
------------------------------------------------------------------------------------------------------------------------------------------------------------
Syntax:     varname=dictobj.values()
=>This Function is used for Obtaining Values of Value and Palced in them IN LHS Varname and whose type is <class,dict_values>
------------------------
Examples
------------------------
>>> d1={10:1.2,20:2.3,30:3.4,40:1.2}
>>> print(d1)
{10: 1.2, 20: 2.3, 30: 3.4, 40: 1.2}
>>> vs=d1.values()
>>> print(vs,type(vs))
dict_values([1.2, 2.3, 3.4, 1.2]) <class 'dict_values'>
>>> for v in vs:
...		print(v)
...
		1.2
		2.3
		3.4
		1.2
>>> for v in d1.values():
...		print(v)
...
		1.2
		2.3
		3.4
		1.2
------------------------------------------------------------------------------------------------------------------------------------------------------------
8) items()
------------------------------------------------------------------------------------------------------------------------------------------------------------
=>Syntax:   varname=dictobj.items()
=>This Function is used for Obtaining (Key,value) from dict object and Palced in them IN LHS Varname and whose type is <class,dict_items>
----------------
Examples
---------------
>>> d1={10:1.2,20:2.3,30:3.4,40:1.2}
>>> print(d1)-------------{10: 1.2, 20: 2.3, 30: 3.4, 40: 1.2}
>>> its=d1.items()
>>> print(its,type(its))------dict_items([(10, 1.2), (20, 2.3), (30, 3.4), (40, 1.2)]) <class 'dict_items'>
>>> for kv in its:
...		print(kv)
...
		(10, 1.2)
		(20, 2.3)
		(30, 3.4)
		(40, 1.2)
>>> for k,v in its:
...		print(k,"--->",v)
...
		10 ---> 1.2
		20 ---> 2.3
		30 ---> 3.4
		40 ---> 1.2
>>> for kv in d1.items():
...		print(kv)
...
		(10, 1.2)
		(20, 2.3)
		(30, 3.4)
		(40, 1.2)
>>> for x,y in d1.items():
...		print(x,"--->",y)
...
			10 ---> 1.2
			20 ---> 2.3
			30 ---> 3.4
			40 ---> 1.2
------------------------------------------------------------------------------------------------------------------------------------------------------------
9) update()
---------------------------------------------------------------------------------------------------------------------------------------------------------
Syntax:     dictobj1.update(dictobj2)
=>This is used for updating (OR Adding ) the content of Dictobj2 with dictobj1 OR Merging of dict data.
-----------------
Examples
----------------
>>> d1={10:"RS",20:"TR"}
>>> d2={30:"JH",40:"DR"}
>>> print(d1)
{10: 'RS', 20: 'TR'}
>>> print(d2)
{30: 'JH', 40: 'DR'}
>>> d1.update(d2)
>>> print(d1)
{10: 'RS', 20: 'TR', 30: 'JH', 40: 'DR'}
>>> print(d2)
{30: 'JH', 40: 'DR'}
------------------
>>> d1={10:"RS",20:"TR"}
>>> d2={20:"JH",40:"DR"}
>>> print(d1)
{10: 'RS', 20: 'TR'}
>>> print(d2)
{20: 'JH', 40: 'DR'}
>>> d1.update(d2)
>>> print(d1)
{10: 'RS', 20: 'JH', 40: 'DR'}
----------------
>>> d1={10:"RS",20:"TR"}
>>> d2={10:"Mandakini",20:"Uwshswani"}
>>> print(d1)
{10: 'RS', 20: 'TR'}
>>> print(d2)
{10: 'Mandakini', 20: 'Uwshswani'}
>>> d1.update(d2)
>>> print(d1)
{10: 'Mandakini', 20: 'Uwshswani'}
---------------------------------------------------------------------------------------------------------------------------------------------------------